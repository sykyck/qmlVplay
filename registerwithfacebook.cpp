#include "registerwithfacebook.h"

RegisterWithFacebook::RegisterWithFacebook(QObject *parent) : QObject(parent)
{
  qDebug()<<"Register With Facebook Constructer Called";
  auto replyHandler = new QOAuthHttpServerReplyHandler(this);
  oauth2.setReplyHandler(replyHandler);
  oauth2.setAuthorizationUrl(QUrl("https://www.facebook.com/dialog/oauth"));
  oauth2.setAccessTokenUrl(QUrl("https://graph.facebook.com/oauth/access_token"));
  oauth2.setScope("sending request");

  //This signal is emitted when the url generated by resourceOwnerAuthorization() is ready to be used in the web browser
  //to allow the application to impersonate the user
  connect(&oauth2, SIGNAL(authorizeWithBrowser(QUrl)), this, SLOT(onAuthorizeWithBrowser(QUrl)));
  connect(&oauth2, SIGNAL(statusChanged(QAbstractOAuth::Status)), this, SLOT(onStatusChanged(QAbstractOAuth::Status)));
  connect(&oauth2, SIGNAL(granted()), this, SLOT(onAuthorizationGranted()));
}

RegisterWithFacebook::~RegisterWithFacebook()
{
   qDebug()<<"Register With Facebook Destructer Called";
}

void RegisterWithFacebook::onRegisterWithFbClicked()
{
   qDebug()<<"Register With Facebook Slot Called";
   oauth2.grant();
}

void RegisterWithFacebook::onStatusChanged(QAbstractOAuth::Status status)
{
    qDebug()<<"Current Authentication Status = "<< (int)status;
}

void RegisterWithFacebook::onAuthorizationGranted()
{
    qDebug()<<"iNSIDE onAuthorizationGranted";
}

void RegisterWithFacebook::onAuthorizeWithBrowser(QUrl url)
{
    qDebug()<<"On Authorize With Browser Url = "<< url;
}
